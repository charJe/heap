#+options: \n:t
#+author: Charles Jackson
#+title: Heap
This is an implementation of a generic heap in C. Because it takes a comparing function it can be used as a min heap or a max heap and compare any part of whatever data structure you decide to store in it.

Here is an example of how you would use it (from example.c):
#+begin_src c
    /* init heap */
    Heap* heap = HEAP_INIT(compareIntsMin, 7);
    /* add an element */
    int a = 5;
    HEAP_ADD(heap, (void*)(&a));
    /* add some more elements */
    int b = 7;
    HEAP_ADD(heap, (void*)(&b));
    int c = 4;
    HEAP_ADD(heap, (void*)(&c));
    int d = 10;
    HEAP_ADD(heap, (void*)(&d));
    int e = 8;
    /* must cast and reference generic element */
    HEAP_ADD(heap, (void*)(&e));
    int f = 3;
    HEAP_ADD(heap, (void*)(&f));
    int g = 1;
    HEAP_ADD(heap, (void*)(&g));

    /* remove elements until there are none left*/
    while(1) {
        /* print out whole heap  */
        for(int i = 1; i <= heap->length; ++i) {
            /* must cast then dereference generic element */
            int spot = *(int*)(heap->heap[i]);
            printf("%d, ", spot);
        }
        /* print and remove highest priority element */
        void* min = HEAP_REMOVE(heap);
        if(min != NULL)
            printf("\nmin: %d\n", *(int*)min);
        else
            break;
    }

#+end_src

You can try this example yourself by executing the following commands:
#+begin_src bash
$ git clone https://github.com/charJe/heap.git
$ cd heap
$ make test
#+end_src
